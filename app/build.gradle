apply plugin: 'com.android.application'

android {

    compileSdkVersion 26

    defaultConfig {
        applicationId "com.sovworks.eds.android"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 224
        versionName "2.0.0.224"
        multiDexEnabled true


        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86', 'armeabi-v7a','arm64-v8a'
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

	signingConfigs {
        debug {
            storeFile file('../misc/keys.keystore')
            storePassword 'android'
            keyAlias 'eds-debug-key'
            keyPassword 'android'
        }
    }    

    flavorDimensions "fullOrLite", "licCheckType", "inet", "fsm"

    productFlavors {
        
        lite {
            dimension "fullOrLite"
            applicationId "com.sovworks.edslite"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lite.pro'
            externalNativeBuild {
                cmake {
                    targets "edsxts", "edsctr", "edsaes", "edsserpent", "edstwofish", "edsripemd160", "edswhirlpool", "fdraio", "localxts", "edscfb", "edscbc", "edsctr", "edsgost"
                }
            }
        }
        licCheckNone {
            dimension "licCheckType"
        }
        noinet {
            dimension "inet"
        }
        nofsml {
            dimension "fsm"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if ((names.contains("lite") && !names.contains("licCheckNone")) ||
                (names.contains("full") && names.contains("licCheckNone")) ||
                (names.contains("inet") && !names.contains("full")) ||
                (names.contains("fsm") && !names.contains("full")) ||
                (names.contains("nofsm") && !names.contains("full")) ||
                (names.contains("fsm") && !names.contains("inet")) ||
                (names.contains("fsm") && !names.contains("licCheckGP")) ||
                (names.contains("nofsml") && !names.contains("lite"))

        ) {
            setIgnore(true)
        }
    }

    buildTypes {
        
        debug {
            signingConfig signingConfigs.debug
            externalNativeBuild {

                cmake {
                    cFlags "-DDEBUG"
                }
            }
            debuggable true
            jniDebuggable true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
          //checkReleaseBuilds false
          abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = outputFileName.replace("app-", "EDS-").replace(".apk", "-v${variant.versionName}.apk")
        }
    }

    externalNativeBuild {

        cmake {
           path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.drewnoakes:metadata-extractor:2.9.1'
    implementation 'com.android.support:design:26.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'

    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    // If you want to bind to Android-specific lifecycles
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
    // If you want pre-written Activities and Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'
    implementation 'com.android.support:exifinterface:26.1.0'
}


apply from: 'build-full.gradle'

if (file('build-local').exists()) {
	apply from: 'build-local.gradle'
}